// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Example API
 *
 * Example API spec
 *
 * API version: v1
 * Contact: example@example-team.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ExampleCallAPIController binds http requests to an api service and writes the service results to the http response
type ExampleCallAPIController struct {
	service ExampleCallAPIServicer
	errorHandler ErrorHandler
}

// ExampleCallAPIOption for how the controller is set up.
type ExampleCallAPIOption func(*ExampleCallAPIController)

// WithExampleCallAPIErrorHandler inject ErrorHandler into controller
func WithExampleCallAPIErrorHandler(h ErrorHandler) ExampleCallAPIOption {
	return func(c *ExampleCallAPIController) {
		c.errorHandler = h
	}
}

// NewExampleCallAPIController creates a default api controller
func NewExampleCallAPIController(s ExampleCallAPIServicer, opts ...ExampleCallAPIOption) Router {
	controller := &ExampleCallAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ExampleCallAPIController
func (c *ExampleCallAPIController) Routes() Routes {
	return Routes{
		"GetChildrenByExampleParentId": Route{
			strings.ToUpper("Get"),
			"/api/v1/example-parents/{id}/example-childs",
			c.GetChildrenByExampleParentId,
		},
		"GetExampleParentById": Route{
			strings.ToUpper("Get"),
			"/api/v1/example-parents/{id}",
			c.GetExampleParentById,
		},
		"GetExamples": Route{
			strings.ToUpper("Get"),
			"/api/v1/example-parents",
			c.GetExamples,
		},
		"GetExamplesSimple": Route{
			strings.ToUpper("Get"),
			"/api/v1/examples",
			c.GetExamplesSimple,
		},
	}
}

// GetChildrenByExampleParentId - Get children of parent by example parent ID.
func (c *ExampleCallAPIController) GetChildrenByExampleParentId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetChildrenByExampleParentId(r.Context(), idParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetExampleParentById - Get example parent by ID.
func (c *ExampleCallAPIController) GetExampleParentById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetExampleParentById(r.Context(), idParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetExamples - Get examples.
func (c *ExampleCallAPIController) GetExamples(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetExamples(r.Context(), limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetExamplesSimple - Get examples.
func (c *ExampleCallAPIController) GetExamplesSimple(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetExamplesSimple(r.Context(), limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
